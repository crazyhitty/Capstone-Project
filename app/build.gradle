/*
 * MIT License
 *
 * Copyright (c) 2016 Kartik Sharma
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-crash'
apply plugin: 'com.github.triplet.play'

ext.shouldSplitApk = false
ext.universalApkStatus = true

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = project.hasProperty("predatorServiceAccountEmail") ? "$predatorServiceAccountEmail" : ""
            jsonFile = file("../google_play.json")
        }
    }

    defaultConfig {
        applicationId "com.crazyhitty.chdev.ks.predator"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 34
        versionName "0.43"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }

    signingConfigs {
        release {
            storeFile file("../keystore.jks")
            storePassword project.hasProperty("predatorStorePassword") ? "$predatorStorePassword" : ""
            keyAlias project.hasProperty("predatorKeyAlias") ? "$predatorKeyAlias" : ""
            keyPassword project.hasProperty("predatorKeyPassword") ? "$predatorKeyPassword" : ""
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    splits {
        density {
            enable shouldSplitApk
            exclude 'ldpi', 'tvdpi', 'xxxhdpi'
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
        abi {
            enable shouldSplitApk
            reset()
            include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a', 'armeabi'
            universalApk universalApkStatus
        }
    }
}

ext.abiCodes = ['x86':1, 'x86_64':2, 'arm64-v8a':3, 'armeabi-v7a':4, 'armeabi':5]
ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3, 'xxhdpi': 4]
import com.android.build.OutputFile
android.applicationVariants.all { variant ->
    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->
        if (shouldSplitApk) {
            def baseAbiVersionCode =
                    project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
            def baseDensityVersionCode =
                    project.ext.densityCodes.get(output.getFilter(OutputFile.DENSITY))

            output.versionCodeOverride =
                    (baseAbiVersionCode == null ? 0 : baseAbiVersionCode) * 10000000 +
                            (baseDensityVersionCode == null ? 0 : baseDensityVersionCode) * 1000000 +
                            variant.versionCode
        }
    }
}

play {
    track = 'beta'
    untrackOld = true // will untrack 'alpha' while upload to 'beta'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // android test
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // java test
    testCompile 'junit:junit:4.12'

    // support libs
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.android.support:design:25.1.1'

    // cardview lib
    compile 'com.android.support:cardview-v7:25.1.1'

    // external module libs
    compile project(':producthunt-wrapper')

    // material dimensions
    compile 'com.dmitrymalkovich.android:material-design-dimens:1.4'

    // butterknife
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

    // view pager indicator
    compile 'com.romandanylyk:pageindicatorview:0.0.8'

    // event bus
    compile 'org.greenrobot:eventbus:3.0.0'

    // chrome custom tabs helper
    compile 'me.zhanghai.android.customtabshelper:library:1.0.3'

    // fresco
    compile 'com.facebook.fresco:fresco:1.0.0'

    // For animated GIF support
    compile 'com.facebook.fresco:animated-gif:1.0.0'

    // For zoom support
    compile 'me.relex:photodraweeview:1.1.3'

    // changelog lib
    compile 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'

    // crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }

    // firebase
    compile 'com.google.firebase:firebase-core:11.6.2'
    compile 'com.google.firebase:firebase-crash:11.6.2'

    // font
    compile 'uk.co.chrisjenx:calligraphy:2.3.0'

    // lottie
    compile 'com.airbnb.android:lottie:2.1.0'

    // better link movement method
    compile 'me.saket:better-link-movement-method:2'
}

task getVersionName() {
    doLast {
        println android.defaultConfig.versionName
    }
}

apply plugin: 'com.google.gms.google-services'